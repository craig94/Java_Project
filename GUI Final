/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Adventure;
import javax.swing.DefaultListModel;

/**
 *
 * @author s1126353
 */
public class GUI extends javax.swing.JFrame {
    
    
       ///// Creating Items /////
  
    
  public static boolean item_use = false;
  public static boolean useItemPressed = true;
  public static int index = 0; 
  boolean inventory_status = false;
 
 //public static Items key1 = new Items("Key", "You can use this key","typeKey", 3 , 4, 0, 5, false); 
 //public static Items key2 = new Items("Key", "You can use this key","typeKey", 3 , 4, 0, 5, false);  
 //public static Items key3 = new Items("Key", "You can use this key","typeKey", 3 , 4, 0, 5, false);  
  Items newspaper = new Items("Newspaper","Last weeks newspaper.","You read through the paper and found out a week ago extra-terrestrial beings invaded earth and their intentions are unknown.", false, false, 20, 20, 3,2);
  Items phone = new Items("Mobile phone", " A brick and a half of a phone - looks scratched but still usable.", "You tried to use the phone although there is some it to call (story line) but there is interference affecting its signal!", false, false, 20, 20,8,2);
  Items creditCard = new Items("Credit Card","Somebody must of lost this.", "AIN'T NOBODY GOT TIME TO USE A CREDIT CARD IN THIS SITUATION, YOU 'BOUT TO DIE FOOL!", false, false, 20,20,10,2);
  Items key_hugh = new Items("key_h", "The hey to the Hugh Robson Building", "You used the key to unlock the door - the door is now unlocked.", false,false, 1,1,20,20);
  Items crowBar = new Items("Crowbar", "Could be used to bust open some doors - probably anydoor...", "You used the crowbar to bust open the door. The door is no longer locked.", false,false,20,20,2,2);
  Items flareGun = new Items("Flare gun", "A small firearm thats loaded to shoot a flare - better save this for when the time is right to use this!", "You pulled the trigger and shot the flare into the dark sky - its intense bright light soars and lights up the area above you.", false,false,20,20,4,2);
  Items key_appleton = new Items("key_a", "The key to Appleton Tower", "You used the key to unlock the door - the door is now unlocked.", false,false, 20,20,2,5);
  Items key_teviot = new Items("key_teviot", "The key to Teviot", "You used the key to unlock the door - the door is now unlocked.", false,false, 2,5,5,4);
  Items key_library = new Items("key_library", "The key to The Library", "You used the key to unlock the door - the door is now unlocked.", false,false, 20,20,3,1);  
  Items keycard = new Items("KeyCard", "The key to The Informatics forum", "You used the key to unlock the door - the door is now unlocked.", false,false, 20,20,7,2); 
  Items key_hume = new Items("key_hume", "The key to The David Hume Tower", "You used the key to unlock the door - the door is now unlocked.", false,false, 20,20,4,2); 
  
  
  // There must be not null objects in this array or the in_inventory function will not work.
 public static Items[] items = new Items[11];
 //items[0] = key1;

     
    DefaultListModel list = new DefaultListModel();  
    private boolean inBuilding = false;
    public static int[][] grid = CreateMap.edinburgh(); 
    private String X = "2";
    private String Y = "4";
    public int no;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Picture_Frame = new javax.swing.JLabel();
        Start = new javax.swing.JButton();
        Up = new javax.swing.JButton();
        Left = new javax.swing.JButton();
        Right = new javax.swing.JButton();
        Down = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputBox = new javax.swing.JTextArea();
        Enter_Building = new javax.swing.JButton();
        Exit_Building = new javax.swing.JButton();
        PickUp = new javax.swing.JButton();
        Use = new javax.swing.JButton();
        BuildingF = new javax.swing.JButton();
        BuildingB = new javax.swing.JButton();
        Look = new javax.swing.JButton();
        Show_Items = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Inventory = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1280, 800));
        setResizable(false);

        Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map99.jpg"))); // NOI18N

        Start.setText("START");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Up.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Up.jpg"))); // NOI18N
        Up.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Up.setEnabled(false);
        Up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpActionPerformed(evt);
            }
        });

        Left.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Left.jpg"))); // NOI18N
        Left.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Left.setEnabled(false);
        Left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftActionPerformed(evt);
            }
        });

        Right.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Right.jpg"))); // NOI18N
        Right.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Right.setEnabled(false);
        Right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightActionPerformed(evt);
            }
        });

        Down.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Down.jpg"))); // NOI18N
        Down.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Down.setEnabled(false);
        Down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownActionPerformed(evt);
            }
        });

        OutputBox.setColumns(20);
        OutputBox.setRows(5);
        OutputBox.setWrapStyleWord(true);
        jScrollPane1.setViewportView(OutputBox);

        Enter_Building.setText("Enter Building");
        Enter_Building.setEnabled(false);
        Enter_Building.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Enter_BuildingActionPerformed(evt);
            }
        });

        Exit_Building.setText("Exit Building");
        Exit_Building.setEnabled(false);
        Exit_Building.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_BuildingActionPerformed(evt);
            }
        });

        PickUp.setText("Pick Up Item");
        PickUp.setEnabled(false);
        PickUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PickUpActionPerformed(evt);
            }
        });

        Use.setText("Use Item");
        Use.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseActionPerformed(evt);
            }
        });

        BuildingF.setText("Building Move Forward");
        BuildingF.setEnabled(false);
        BuildingF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildingFActionPerformed(evt);
            }
        });

        BuildingB.setText("Building Move Back");
        BuildingB.setEnabled(false);
        BuildingB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildingBActionPerformed(evt);
            }
        });

        Look.setText("Look");
        Look.setEnabled(false);
        Look.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookActionPerformed(evt);
            }
        });

        Show_Items.setText("Show Items");
        Show_Items.setEnabled(false);
        Show_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_ItemsActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(Inventory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(Picture_Frame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Left)
                                            .addGap(53, 53, 53))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(Up)
                                                .addComponent(Down))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                    .addComponent(Right)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(Show_Items)))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Exit_Building, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Enter_Building, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Look, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PickUp, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(BuildingB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(BuildingF)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(576, 576, 576)
                .addComponent(Use, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Start, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Picture_Frame)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Up)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Left)
                                    .addComponent(Right))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Down)
                                .addGap(87, 87, 87)
                                .addComponent(Show_Items))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Enter_Building)
                                            .addComponent(PickUp))
                                        .addGap(18, 18, 18)
                                        .addComponent(Exit_Building))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BuildingF)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(BuildingB)
                                            .addComponent(Look)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Use)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
// This inialises the Game, setting the first position to the Centre of the map.   
        items[0] = newspaper;
        items[1] = phone;
        items[2] = creditCard;
        items[3] = key_hugh;
        items[4] = crowBar;
        items[5] = flareGun;
        items[6] = key_appleton;
        items[7] = key_teviot;
        items[8] = key_library;  
        items[9] = keycard;          
        items[10] = key_hume;           
        
        
        Show_Items.setEnabled(true);
        Look.setEnabled(true);
        Up.setEnabled(true);
        Down.setEnabled(true);     
        Right.setEnabled(true);   
        Left.setEnabled(true);
        Inventory.setVisible(false);
       
        Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map24.jpg")));
        OutputBox.setLineWrap(true);
        OutputBox.append("You wake up in George Square. There is nobody around. A sign ahead reads 'Contaminated Area' " + "\n");
        Start.setEnabled(false);
        
            
        
        // TODO add your handling code here:
    }//GEN-LAST:event_StartActionPerformed

    private void UpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpActionPerformed
//Moves Player Up int the Map
        
no = grid[GridMap.player_pos(grid)[0]-1][GridMap.player_pos(grid)[1]];
Enter_Building.setEnabled(false);

if (no != 0 && no != 9)
{
    OutputBox.append("You have reached " + Building.check_building(no) + "\n");
    Enter_Building.setEnabled(true);
}
else if (no == 9)
{  
    OutputBox.append("You are fenced in! The signs read 'Contaminated Area'" + "\n");
}
else
{
    grid = GridMap.move_pos(grid,GridMap.player_pos(grid)[0] - 1, GridMap.player_pos(grid)[1]);
    int y = GridMap.player_pos(grid)[0] - 1;
    int x = GridMap.player_pos(grid)[1] - 1;    
    X = Integer.toString(x);
    Y = Integer.toString(y);
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map" + X + Y + ".jpg")));
}
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_UpActionPerformed

    private void LeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftActionPerformed
//Moves Player Left in the Map
        
no = grid[GridMap.player_pos(grid)[0]][GridMap.player_pos(grid)[1] - 1];
Enter_Building.setEnabled(false);

if (no != 0 && no != 9)
{
    OutputBox.append("You have reached " + Building.check_building(no) + "\n");
    Enter_Building.setEnabled(true);
}
else if (no == 9)
{
    OutputBox.append("You are fenced in! The signs read 'Contaminated Area'" + "\n");
}
else
{
    grid = GridMap.move_pos(grid,GridMap.player_pos(grid)[0], GridMap.player_pos(grid)[1] - 1);
    int y = GridMap.player_pos(grid)[0] - 1;
    int x = GridMap.player_pos(grid)[1] - 1;
    X = Integer.toString(x);
    Y = Integer.toString(y);
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map" + X + Y + ".jpg"))); 
        
}     
        
        // TODO add your handling code here:
    }//GEN-LAST:event_LeftActionPerformed

    private void DownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownActionPerformed
// Moving Player Down in the Map
        
no = grid[GridMap.player_pos(grid)[0]+1][GridMap.player_pos(grid)[1]];
Enter_Building.setEnabled(false);

if (no != 0 && no != 9){
    OutputBox.append("You have reached " + Building.check_building(no) + "\n");
    Enter_Building.setEnabled(true);
}
else if (no == 9)
{
    OutputBox.append("You are fenced in! The signs read 'Contaminated Area'" + "\n");
  
}
else
{
    grid = GridMap.move_pos(grid,GridMap.player_pos(grid)[0] + 1, GridMap.player_pos(grid)[1]);
    int y = GridMap.player_pos(grid)[0] - 1;
    int x = GridMap.player_pos(grid)[1] - 1;
    X = Integer.toString(x);
    Y = Integer.toString(y);
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map" + X + Y + ".jpg"))); 
}
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_DownActionPerformed

    private void RightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightActionPerformed
// Moves Player Right in the Map
        
no = grid[GridMap.player_pos(grid)[0]][GridMap.player_pos(grid)[1] + 1];
Enter_Building.setEnabled(false);

if (no != 0 && no != 9){
 OutputBox.append("You have reached " + Building.check_building(no) + "\n");
 Enter_Building.setEnabled(true);
}
else if (no == 9)
{
     OutputBox.append("You are fenced in! The signs read 'Contaminated Area'" + "\n");
}
else
{
    grid = GridMap.move_pos(grid,GridMap.player_pos(grid)[0], GridMap.player_pos(grid)[1] + 1);
    int y = GridMap.player_pos(grid)[0] - 1;
    int x = GridMap.player_pos(grid)[1] - 1;
    
    X = Integer.toString(x);
    Y = Integer.toString(y);
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map" + X + Y + ".jpg")));  
}        

// TODO add your handling code here:
    }//GEN-LAST:event_RightActionPerformed

    private void Show_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show_ItemsActionPerformed
 if (!inventory_status) {
            Inventory.setVisible(true);
            inventory_status = true;
        } else {
            Inventory.setVisible(false);
            inventory_status = false;
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_Show_ItemsActionPerformed

    private void Enter_BuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Enter_BuildingActionPerformed
Up.setEnabled(false);
Down.setEnabled(false);
Right.setEnabled(false);   
Left.setEnabled(false);
Exit_Building.setEnabled(true);

   if (no == 2){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/HughRobson.jpg")));
   }
  else if (no == 3){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Teviot.jpg")));   
   }
   else if (no == 4){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/IF.jpg")));   
   }
   else if (no == 5){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Appleton.jpg")));   
   }
   else if (no == 6){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/DavidHume.jpg")));   
   }
   else if (no == 7){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Library.jpg")));   
   }
   else if (no == 8){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/GSLT.jpg")));   
   }
   else if (no == 10){
    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Bus.jpg")));   
   }
    
   
    Enter_Building.setEnabled(false);
    BuildingF.setEnabled(true);
    BuildingB.setEnabled(true);
    inBuilding = true;

        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_Enter_BuildingActionPerformed

    private void Exit_BuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_BuildingActionPerformed
   Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Map" + X + Y + ".jpg")));
   Up.setEnabled(true);
   Down.setEnabled(true);     
   Right.setEnabled(true);   
   Left.setEnabled(true);
   Exit_Building.setEnabled(false);
   
   index = 0;
   
   BuildingF.setEnabled(false);
   BuildingB.setEnabled(false);
   inBuilding = false;
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_Exit_BuildingActionPerformed

    private void BuildingFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildingFActionPerformed
if (index < 6 && useItemPressed) {

        index ++;
}      

//NewJFrame.assign();

//int l = index;
   if (no == 2){
      OutputText.HughRobson(index, items);
    //OutputText.HughRobson(l, items);
   }
   else if (no == 3){
     OutputText.Teviot(index, items);   
   }
   else if (no == 4){
    OutputText.IF(index, items);   
   }
   else if (no == 5){
    OutputText.Appleton(index, items);  
   }
   else if (no == 6){
    OutputText.David(index, items);   
   }
   else if (no == 7){
    OutputText.Library(index, items);   
   }
   else if (no == 8){
    OutputText.GSLT(index, items);  
   }
   else if (no == 10){
    OutputText.Bus(index, items);   
   }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_BuildingFActionPerformed

    private void BuildingBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildingBActionPerformed
if (index > 0){
        index --;
        useItemPressed = true;
}

//NewJFrame.assign();

   if (no == 2){
    OutputText.HughRobson(index, items);
   }
   else if (no == 3){
    OutputText.Teviot(index, items);   
   }
   else if (no == 4){
    OutputText.IF(index, items);
   }
   else if (no == 5){
    OutputText.Appleton(index, items);  
   }
   else if (no == 6){
    OutputText.David(index, items);   
   }
   else if (no == 7){
    OutputText.Library(index, items);   
   }
   else if (no == 8){
    OutputText.GSLT(index, items);  
   }
   else if (no == 10){
    OutputText.Bus(index, items);   
   }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_BuildingBActionPerformed

    private void LookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookActionPerformed
boolean active = false;
        
if(!inBuilding){
    for (int i = 0; i < items.length; i++){
        if (items[i].getAvailable()) {
            OutputBox.append("\nThere is an item here!\n");
            PickUp.setEnabled(true);
            active = true;
     }
    }
}
     
    if(inBuilding){
     for (int j = 0; j < items.length; j++){
         if (items[j].getAvailable(no, index)) {
            OutputBox.append("\nThere is an item here!\n");
            PickUp.setEnabled(true);
            active = true;
            }
         }
         
     }
 
     
     if (!active){
         OutputBox.append("\nThere is no item here!\n");
     }
    
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_LookActionPerformed

    private void PickUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PickUpActionPerformed
    
    if (!inBuilding){    
     for (int i = 0; i < items.length; i++){
     if (items[i].getAvailable()) {
         items[i].setAcquireded(true);
         OutputBox.append("\nYou have picked up a " + items[i].getName() + "\n");
         //Inventory.append(items[i].getName() + "\n");
         list.addElement(items[i].getName());
         Inventory.setModel(list);
         items[i].setX(20);
         items[i].setY(20);
         items[i].setBuilding(20);
         items[i].setIndex(20);
         
     }
    
 
     }
    }     
       if (inBuilding){
           for (int i = 0; i < items.length; i++){
            if (items[i].getAvailable(no,index)) {
                items[i].setAcquireded(true);
                OutputBox.append("\nYou have picked up a " + items[i].getName() + "\n");
                //Inventory.append(items[i].getName() + "\n");
                list.addElement(items[i].getName());
                Inventory.setModel(list);
                items[i].setX(20);
                items[i].setY(20);
                items[i].setBuilding(20);
                items[i].setIndex(20);
         
             }
         }
    } 
    
   
   PickUp.setEnabled(false);
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_PickUpActionPerformed

    private void UseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseActionPerformed
        if (item_use) {
            if (no == 2 && index == 3) {
                if (OutputText.in_inventory(items, "Crowbar")) {
                    OutputBox.append("The Zombie attacks you, but you kill it with the Crowbar \n");
                    useItemPressed = true;
                } else if (!OutputText.in_inventory(items, "Crowbar")) {
                    OutputBox.append("You don't have the right Item \n");
                }
            }
            if (no == 8 && index == 1) {
                if (OutputText.in_inventory(items, "Crowbar")) {
                    OutputBox.append("You turn around and attack the thing behind you and kill it.\n But, you look closer at the thing you just attacked and you realised that YOU JUST KILLED YOUR MAW! You sick fiend!\n Distraught, you hear something else in the corner and decide to investigate further.\n ITS YOUR UNCLE! \n");
                    useItemPressed = true;
                } else if (!OutputText.in_inventory(items, "Crowbar")) {
                    OutputBox.append("You don't have the right Item \n");
                }
            }
            if (no == 6 && index == 6) {
                if (OutputText.in_inventory(items, "Flare gun")) {
                    OutputBox.append("\nYou use the Flare Gun to signal the helicopter to come and pick you up\nCongratulations! You have escaped from George Square\n");
                    useItemPressed = true;
                    Picture_Frame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Adventure/resources/Munt.jpg")));
                    Show_Items.setEnabled(false);
                    Look.setEnabled(false);
                    Up.setEnabled(false);
                    Down.setEnabled(false);     
                    Right.setEnabled(false);   
                    Left.setEnabled(false);
                    Inventory.setVisible(false);
                    BuildingF.setEnabled(false);
                    BuildingB.setEnabled(false);
                    PickUp.setEnabled(false);
                    Use.setEnabled(false);
                    Exit_Building.setEnabled(false);
                    
                } else if (!OutputText.in_inventory(items, "Flare gun")) {
                    OutputBox.append("You don't have the right Item \n");
                }
            }
            

            // TODO add your handling code here:


        }
        else {
                OutputBox.append("You can't use an item here \n");
            }

            item_use = false;
    }//GEN-LAST:event_UseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuildingB;
    private javax.swing.JButton BuildingF;
    private javax.swing.JButton Down;
    private javax.swing.JButton Enter_Building;
    private javax.swing.JButton Exit_Building;
    private javax.swing.JList Inventory;
    private javax.swing.JButton Left;
    private javax.swing.JButton Look;
    public static javax.swing.JTextArea OutputBox;
    private javax.swing.JButton PickUp;
    private javax.swing.JLabel Picture_Frame;
    private javax.swing.JButton Right;
    private javax.swing.JButton Show_Items;
    private javax.swing.JButton Start;
    private javax.swing.JButton Up;
    private javax.swing.JButton Use;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
